{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","getReorderedGoods","goods","isReversed","sortType","visibleGoods","sort","g1","g2","LENGTH","length","ALPHABET","localeCompare","reverse","App","state","NONE","onReset","setState","onSort","className","type","classNames","this","onClick","prevState","map","good","React","Component","ReactDOM","render","document","getElementById"],"mappings":"iKAkBKA,E,wGAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAcK,SAASC,EACdC,EADK,GAGJ,IADCC,EACF,EADEA,WAAYC,EACd,EADcA,SAERC,EAAY,YAAOH,GAmBzB,OAjBAG,EAAaC,MAAK,SAACC,EAAIC,GACrB,OAAQJ,GACN,KAAKL,EAASU,OACZ,OAAOF,EAAGG,OAASF,EAAGE,OAExB,KAAKX,EAASY,SACZ,OAAOJ,EAAGK,cAAcJ,GAE1B,QACE,OAAO,MAITL,GACFE,EAAaQ,UAGRR,G,SAlCJN,K,YAAAA,E,oBAAAA,E,iBAAAA,M,KAqCE,IAAMe,EAAb,4MACEC,MAAe,CACbZ,YAAY,EACZC,SAAUL,EAASiB,MAHvB,EAMEC,QAAU,WACR,EAAKC,SACH,CACEf,YAAY,EACZC,SAAUL,EAASiB,QAV3B,EAeEG,OAAS,SAACf,GAAD,OAAwB,kBAAM,EAAKc,SAAS,CAAEd,eAfzD,4CAiBE,WAAU,IAAD,OACP,OACE,sBAAKgB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,SACA,UACA,CACE,WAAYC,KAAKR,MAAMX,WAAaL,EAASY,WAGjDa,QAASD,KAAKJ,OAAOpB,EAASY,UAThC,iCAcA,wBACEU,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CACE,WAAYC,KAAKR,MAAMX,WAAaL,EAASU,SAGjDe,QAASD,KAAKJ,OAAOpB,EAASU,QAThC,4BAcA,wBACEY,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CACE,YAAaC,KAAKR,MAAMZ,aAG5BqB,QAAS,WACP,EAAKN,UAAS,SAACO,GAAD,MACZ,CAAEtB,YAAasB,EAAUtB,gBAX/B,sBAkBEoB,KAAKR,MAAMX,WAAaL,EAASiB,MAAQO,KAAKR,MAAMZ,aACpD,wBACEkB,KAAK,SACLD,UAAU,4BACVI,QAASD,KAAKN,QAHhB,sBAUJ,6BACGhB,EAAkBD,EAAiBuB,KAAKR,OAAOW,KAAI,SAAAC,GAAI,OACtD,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,eAhFpC,GAAyBC,IAAMC,WCpD/BC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.34a15ef0.chunk.js","sourcesContent":["import React from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE = 'none',\n  ALPHABET = 'alphabet',\n  LENGTH = 'length',\n}\n\ntype State = {\n  isReversed: boolean,\n  sortType: SortType,\n};\n\nexport function getReorderedGoods(\n  goods: string[],\n  { isReversed, sortType }: State,\n) {\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((g1, g2) => {\n    switch (sortType) {\n      case SortType.LENGTH:\n        return g1.length - g2.length;\n\n      case SortType.ALPHABET:\n        return g1.localeCompare(g2);\n\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport class App extends React.Component {\n  state: State = {\n    isReversed: false,\n    sortType: SortType.NONE,\n  };\n\n  onReset = () => {\n    this.setState(\n      {\n        isReversed: false,\n        sortType: SortType.NONE,\n      },\n    );\n  };\n\n  onSort = (sortType: SortType) => () => this.setState({ sortType });\n\n  render() {\n    return (\n      <div className=\"section content\">\n        <div className=\"buttons\">\n          <button\n            type=\"button\"\n            className={classNames(\n              'button',\n              'is-info',\n              {\n                'is-light': this.state.sortType !== SortType.ALPHABET,\n              },\n            )}\n            onClick={this.onSort(SortType.ALPHABET)}\n          >\n            Sort alphabetically\n          </button>\n\n          <button\n            type=\"button\"\n            className={classNames(\n              'button',\n              'is-success',\n              {\n                'is-light': this.state.sortType !== SortType.LENGTH,\n              },\n            )}\n            onClick={this.onSort(SortType.LENGTH)}\n          >\n            Sort by length\n          </button>\n\n          <button\n            type=\"button\"\n            className={classNames(\n              'button',\n              'is-warning',\n              {\n                'is-light': !this.state.isReversed,\n              },\n            )}\n            onClick={() => {\n              this.setState((prevState: State) => (\n                { isReversed: !prevState.isReversed }\n              ));\n            }}\n          >\n            Reverse\n          </button>\n\n          {(this.state.sortType !== SortType.NONE || this.state.isReversed) && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={this.onReset}\n            >\n              Reset\n            </button>\n          )}\n        </div>\n\n        <ul>\n          {getReorderedGoods(goodsFromServer, this.state).map(good => (\n            <li data-cy=\"Good\" key={good}>\n              {good}\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}